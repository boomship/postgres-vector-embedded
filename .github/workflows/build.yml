name: Build PostgreSQL + pgvector

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      fail-fast: false  # Don't stop other builds if one fails
      matrix:
        include:
          - os: macos-14
            platform: darwin
            arch: arm64
          - os: macos-13
            platform: darwin  
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: win32
            arch: x64

    runs-on: ${{ matrix.os }}
    
    defaults:
      run:
        shell: ${{ matrix.os == 'windows-latest' && 'bash' || 'bash' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'


    - name: Set up QEMU for ARM64
      if: matrix.arch == 'arm64' && runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # For ARM64, we'll use QEMU emulation - Docker already available on runner
          echo "Using QEMU emulation for ARM64 build"
        else
          sudo apt-get install -y build-essential zlib1g-dev libreadline-dev libssl-dev libicu-dev liblz4-dev libzstd-dev libxml2-dev llvm-dev uuid-dev clang
        fi

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl readline icu4c lz4 zstd libxml2 llvm e2fsprogs

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install OpenSSL via vcpkg (vcpkg already available on runner)
        C:/vcpkg/vcpkg.exe install openssl:x64-windows
        # Debug: Check what vcpkg installed
        echo "=== vcpkg OpenSSL installation ==="
        ls -la C:/vcpkg/installed/x64-windows/lib/ | grep -i ssl || echo "No SSL libs found"
        ls -la C:/vcpkg/installed/x64-windows/lib/ | grep -i crypto || echo "No crypto libs found"
        find C:/vcpkg/installed/x64-windows -name "*.lib" | grep -i ssl
        find C:/vcpkg/installed/x64-windows -name "*.lib" | grep -i crypto
        
        # Keep our working bison/flex setup
        choco install winflexbison3
        toolsPath="/c/ProgramData/chocolatey/lib/winflexbison3/tools"
        echo "$toolsPath" >> $GITHUB_PATH
        # Create symlinks if the executables are named win_bison/win_flex
        if [ -f "$toolsPath/win_bison.exe" ]; then
          ln -s "$toolsPath/win_bison.exe" "$toolsPath/bison.exe"
        fi
        if [ -f "$toolsPath/win_flex.exe" ]; then
          ln -s "$toolsPath/win_flex.exe" "$toolsPath/flex.exe"
        fi

    - name: Get version from package.json
      id: version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          VERSION="$VERSION-pr-${{ github.event.number }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build PostgreSQL + pgvector (Windows)
      if: runner.os == 'Windows'
      run: |
        export PLATFORM=${{ matrix.platform }}
        export ARCH=${{ matrix.arch }}
        make build

    - name: Build PostgreSQL + pgvector (ARM64 with QEMU)
      if: runner.os == 'Linux' && matrix.arch == 'arm64'
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:22.04 bash -c "
            apt-get update && 
            apt-get install -y build-essential curl make bison flex zlib1g-dev libreadline-dev libssl-dev libicu-dev liblz4-dev libzstd-dev libxml2-dev llvm-dev uuid-dev clang pkg-config &&
            export PLATFORM=${{ matrix.platform }} &&
            export ARCH=${{ matrix.arch }} &&
            make build
          "

    - name: Build PostgreSQL + pgvector (Unix)
      if: runner.os != 'Windows' && !(runner.os == 'Linux' && matrix.arch == 'arm64')
      shell: bash
      run: |
        export PLATFORM=${{ matrix.platform }}
        export ARCH=${{ matrix.arch }}
        make build

    - name: Test binaries functionality (Windows)
      if: runner.os == 'Windows'
      run: |
        export PLATFORM=${{ matrix.platform }}
        export ARCH=${{ matrix.arch }}
        ./test-binaries.sh

    - name: Test binaries functionality (ARM64 with QEMU)
      if: runner.os == 'Linux' && matrix.arch == 'arm64'
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:22.04 bash -c "
            apt-get update &&
            apt-get install -y libxml2 libssl3 libicu70 liblz4-1 libzstd1 libreadline8 libuuid1 zlib1g llvm-14-runtime clang-14 &&
            adduser --disabled-password --gecos '' testuser &&
            chown -R testuser:testuser /workspace &&
            su testuser -c '
              export PLATFORM=${{ matrix.platform }} &&
              export ARCH=${{ matrix.arch }} &&
              ./test-binaries.sh
            '
          "

    - name: Test binaries functionality (Unix)
      if: runner.os != 'Windows' && !(runner.os == 'Linux' && matrix.arch == 'arm64')
      shell: bash
      run: |
        export PLATFORM=${{ matrix.platform }}
        export ARCH=${{ matrix.arch }}
        ./test-binaries.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: postgres-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/postgres-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !failure()
    
    steps:
    - uses: actions/checkout@v4

    - name: Get version from package.json
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir release-assets
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        ls -la release-assets/
        
        # Check we have all expected platforms
        expected_files=(
          "postgres-darwin-arm64.tar.gz"
          "postgres-darwin-x64.tar.gz" 
          "postgres-linux-x64.tar.gz"
          "postgres-linux-arm64.tar.gz"
          "postgres-win32-x64.tar.gz"
        )
        
        missing_files=()
        for file in "${expected_files[@]}"; do
          if [ ! -f "release-assets/$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "❌ Missing platform builds:"
          printf '%s\n' "${missing_files[@]}"
          echo "This release would be incomplete. Failing."
          exit 1
        fi
        
        echo "✅ All platform builds present"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: v${{ steps.version.outputs.version }}
        body: |
          PostgreSQL + pgvector embedded binaries
          
          Built from:
          - PostgreSQL 17.2
          - pgvector 0.8.0
          
          Download the appropriate binary for your platform and architecture.
        files: release-assets/*
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}